{
	"info": {
		"_postman_id": "9cea120b-c1b5-4fdf-a50d-242647c8a9d7",
		"name": "Restful-Booker-project",
		"description": "# 🧪 Restful Booker API Testing Project\n\n## 📌 Description\n\nThis project demonstrates **manual API testing** using **Postman** for the [Restful Booker API](https://restful-booker.herokuapp.com/).  \nIt covers the **CRUD operations** (Create, Read, Update, Delete) and authentication process for hotel booking management.\n\nThe goal is to validate API responses, verify data integrity, and ensure that all endpoints work as expected.\n\n---\n\n## 🔗 Base URL\n\n## [https://restful-booker.herokuapp.com](https://restful-booker.herokuapp.com)\n\n## 🧰 Tools Used\n\n| Tool | Purpose |\n| --- | --- |\n| **Postman** | API testing and collection management |\n| **GitHub** | Version control and documentation |\n\n---\n\n## 📂 Folder Structure\n\nRestfulBooker_API_Testing/  \n│  \n├── Collections/  \n│ └── Restful-Booker-Collection.json  \n│  \n├── Environment/  \n│ └── RestfulBooker_Env.json  \n│  \n└── README.md\n\n---\n\n## 🚀 Test Scenarios\n\n| # | Endpoint | Method | Description | Auth Required |\n| --- | --- | --- | --- | --- |\n| 1 | `/ping` | `GET` | Check if API is up and running | ❌ |\n| 2 | `/auth` | `POST` | Create a token for authentication | ❌ |\n| 3 | `/booking` | `POST` | Create a new booking | ❌ |\n| 4 | `/booking/{id}` | `GET` | Get booking details by ID | ❌ |\n| 5 | `/booking/{id}` | `PUT` | Update a booking (full update) | ✅ |\n| 6 | `/booking/{id}` | `PATCH` | Update a booking (partial update) | ✅ |\n| 7 | `/booking/{id}` | `DELETE` | Delete a booking | ✅ |\n\n---\n\n## 🧩 Variables (in Postman Environment)\n\n| Variable | Description | Example |\n| --- | --- | --- |\n| `base_url` | Base endpoint of API | `https://restful-booker.herokuapp.com` |\n| `username` | user used for logging in to create token | `admin` |\n| `password` | password used for logging in to create token | `password123` |\n| `token` | Authentication token | `generated on firing API` |\n| `created_bookingid` | ID of created booking | `generated on firing API` |\n| `update_bookingid` | ID of created booking for full update | `generated on firing API` |\n| `partial_update_bookingid` | ID of created booking for partial update (PATCH) | `generated on firing API` |\n| `bookingid` | ID of created booking for Deletion | `generated on firing API` |\n\n---\n\n## ✅ Expected Results\n\n- **Status Codes:**\n    \n    - 200 → Successful operation\n        \n    - 201 → Resource created or Deletion\n        \n    - 403 → Forbidden / Invalid token\n        \n    - 404 → Resource not found\n        \n    - 400 → Bad Request\n        \n    - 500→ Internal Server Error\n        \n- **Validation Points:**\n    \n    - Response structure matches schema\n        \n    - Data consistency after CRUD operations\n        \n    - Token authentication required for update/delete\n        \n\n---\n\n## 🧠 Author\n\n🧑‍💻 **Eslam Roshdy**  \n📧 [esroshdy22@gmail.com](https://mailto:esroshdy22@gmail.com)  \n🔗 [GitHub Profile](https://github.com/EslamR0shdy94)\n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33701756",
		"_collection_link": "https://e-commerce-api-testing-project.postman.co/workspace/Restful-booker-API-testing-proj~12c1bb1e-7529-4ea4-bfba-b125f21487be/collection/33701756-9cea120b-c1b5-4fdf-a50d-242647c8a9d7?action=share&source=collection_link&creator=33701756"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Auth Positive Scenarios",
					"item": [
						{
							"name": "Login (generate token)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"const json = pm.response.json();\r",
											"pm.expect(json).to.have.property(\"token\");\r",
											"pm.environment.set(\"token\", json.token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					],
					"description": "🔹 Positive Scenarios\n\n📘 Description:\n\nContains valid authentication test cases to ensure that a token is successfully generated using correct credentials.\nThe token will be saved as an environment variable (token) for use in other collections like Booking.\n\n✅ Example Test Case:\n\nPOST /auth with valid username and password → expect 200 OK and a non-empty token."
				},
				{
					"name": "Auth Negative Scenarios",
					"item": [
						{
							"name": "Login invalid (wrong username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"pm.test(\"error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"usernam\": \"anyone\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login invalid (empty username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"pm.test(\"error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"usernam\": \"\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login invalid (wrong password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"pm.test(\"error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login invalid (empty password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"pm.test(\"error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login invalid (empty user and password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"pm.test(\"error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"\",\r\n    \"password\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login invalid (wrong user and password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"pm.test(\"error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"anyone\",\r\n    \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					],
					"description": "🔸 Negative Scenarios\n\n📘 Description:\n\nContains invalid authentication test cases to verify that the system properly handles incorrect or missing credentials.\nEnsures the API returns meaningful error messages and proper status codes.\n\n🚫 Example Test Cases:\n\nInvalid username → expect 200 OK with \"reason\": \"Bad credentials\"\n\nInvalid password → same as above\n\nEmpty body → expect 400 Bad Request"
				}
			],
			"description": "Auth Collection\n\n📘 Description:\n\nThis collection handles the authentication process for the Restful Booker API.  \nIt includes requests to generate a valid token required for performing operations such as update and delete on bookings.  \nThe token is generated using valid credentials and stored as a Postman variable to be reused in other collections.\n\nThis collection is designed to test the **authentication endpoint** of the Restful Booker API.\n\nIt is divided into two sub-collections to clearly separate successful (positive) and failed (negative) authentication scenari\n\n🔹 Includes:\n\nPOST /auth → Generate an authentication token.\n\n✅ Test Focus:\n\nValidate successful token creation (status code: 200).\n\nEnsure the token value is saved correctly in the environment variable (token).\n\nHandle invalid credentials and confirm error message behavior."
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Booking Positive Scenarios",
					"item": [
						{
							"name": "Create new Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response contain Booking ID \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingid\");\r",
											"});\r",
											"const json = pm.response.json();\r",
											"pm.test(\"Check booking id is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.bookingid, \"Booking ID should exist\").to.exist;\r",
											"    pm.expect(jsonData.bookingid, \"Booking ID should not be null\").to.not.be.null;\r",
											"});\r",
											"pm.expect(json).to.have.property(\"bookingid\");\r",
											"pm.environment.set(\"create_bookingid\", json.bookingid);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/booking",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get booking details by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/booking/{{create_bookingid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking",
										"{{create_bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get booking by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/booking?firstname=Eslam&lastname=Roshdy",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "Eslam"
										},
										{
											"key": "lastname",
											"value": "Roshdy"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking Ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array with at least one booking\", function () {\r",
											"    pm.expect(Array.isArray(json)).to.be.true;\r",
											"    pm.expect(json.length).to.be.above(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/booking",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Booking by check in & out date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const json = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array with at least one booking\", function () {\r",
											"    pm.expect(Array.isArray(json)).to.be.true;\r",
											"    pm.expect(json.length).to.be.above(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/booking?checkin=2020-10-25&checkout=2025-10-30",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "2020-10-25"
										},
										{
											"key": "checkout",
											"value": "2025-10-30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "full update booking by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"             \"firstname\" : \"Eslam\",\r",
											"              \"lastname\" : \"Roshdy\",\r",
											"             \"totalprice\" : 260,\r",
											"             \"depositpaid\" : true,\r",
											"                \"bookingdates\" : {\r",
											"                     \"checkin\" : \"2025-10-25\",\r",
											"                    \"checkout\" : \"2025-10-30\"\r",
											"                },\r",
											"    \"additionalneeds\" : \"Breakfast\"\r",
											"        })\r",
											"    }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        console.log(\" Error Creating Booking:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    let bookingData = res.json();\r",
											"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
											"    console.log(\" Booking created successfully! ID:\", bookingData.bookingid);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 320,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-11-05\"\r\n    },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/booking/{{update_bookingid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking",
										"{{update_bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get booking details by ID (after update)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"const bookingId = pm.environment.get(\"update_bookingid\");\r",
											"pm.visualizer.set(`\r",
											"        <h2 style=\"color:orange;\">Booking Updated Successfully!</h2>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingId}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Firstname:</strong> ${jsonData.firstname}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Lastname:</strong> ${jsonData.lastname}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${jsonData.totalprice}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${jsonData.additionalneeds}</p>\r",
											"        `);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/booking/{{update_bookingid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking",
										"{{update_bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partial update booking by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"             \"firstname\" : \"Eslam\",\r",
											"              \"lastname\" : \"Roshdy\",\r",
											"             \"totalprice\" : 300,\r",
											"             \"depositpaid\" : false,\r",
											"                \"bookingdates\" : {\r",
											"                     \"checkin\" : \"2025-10-25\",\r",
											"                    \"checkout\" : \"2025-10-30\"\r",
											"                },\r",
											"    \"additionalneeds\" : \"cup of Tea\"\r",
											"        })\r",
											"    }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        console.log(\" Error Creating Booking:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    let bookingData = res.json();\r",
											"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
											"    console.log(\" Booking created successfully! ID:\", bookingData.bookingid);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Roshdy\",\r\n    \"lastname\": \"Marawan\",\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking",
										"{{partial_update_bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get booking details by ID (after partial update)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"const bookingId = pm.environment.get(\"partial_update_bookingid\");\r",
											"pm.visualizer.set(`\r",
											"        <h2 style=\"color:orange;\">Booking Updated Successfully!</h2>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingId}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Firstname:</strong> ${jsonData.firstname}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Lastname:</strong> ${jsonData.lastname}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${jsonData.totalprice}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${jsonData.additionalneeds}</p>\r",
											"    `);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking",
										"{{partial_update_bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete booking by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"             \"firstname\" : \"Ahmed\",\r",
											"              \"lastname\" : \"Fathy\",\r",
											"             \"totalprice\" : 400,\r",
											"             \"depositpaid\" : true,\r",
											"                \"bookingdates\" : {\r",
											"                     \"checkin\" : \"2025-10-25\",\r",
											"                    \"checkout\" : \"2025-10-30\"\r",
											"                },\r",
											"    \"additionalneeds\" : \"Dinner\"\r",
											"        })\r",
											"    }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        console.log(\"❌ Error Creating Booking:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    let bookingData = res.json();\r",
											"    let bookingId = bookingData.bookingid;\r",
											"\r",
											"    pm.environment.set(\"bookingid\", bookingId);\r",
											"\r",
											"    pm.visualizer.set(`\r",
											"        <h2 style=\"color:green;\"> Booking Created Before Deletion</h2>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">ID:</strong> ${bookingId}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
											"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
											"    `);\r",
											"\r",
											"    console.log(\" Booking created successfully! ID:\", bookingId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Deleting confirm message to have : created\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/booking/{{bookingid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "StartFragment\n\n## ✅ **Positive Scenarios**\n\n📘 **Description:**\n\nThis folder contains all **successful test cases** for Booking endpoints.\n\nEach request is designed to validate that the API correctly handles normal operations such as creating, updating, retrieving, and deleting bookings.\n\n### 🔹 Requests inside:\n\n| # | Endpoint | Method | Purpose |\n| --- | --- | --- | --- |\n| 1 | `/booking` | `POST` | Create a new booking with valid data |\n| 2 | `/booking/{id}` | `GET` | Retrieve an existing booking by ID |\n| 3 | `/booking/{id}` | `PUT` | Fully update booking details using a valid token |\n| 4 | `/booking/{id}` | `PATCH` | Partially update booking details |\n| 5 | `/booking/{id}` | `DELETE` | Delete a booking with valid token |\n\n🧩 **Validation Focus:**\n\n- Response status is `200` or `201`.\n    \n- Response body contains correct booking details.\n    \n- Token-based authorization works correctly for update/delete.\n    \n- Booking ID and fields are correctly stored as Postman variables.\n    \n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            username: pm.environment.get(\"username\") || \"admin\",\r",
									"            password: pm.environment.get(\"password\") || \"password123\"\r",
									"        })\r",
									"    }\r",
									"}, (err, res) => {\r",
									"    if (err) {\r",
									"        console.log(\" Error generating token:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    let token = res.json().token;\r",
									"    pm.environment.set(\"token\", token);\r",
									"    console.log(\"New token saved:\", token);\r",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Booking Negative Scenarios",
					"item": [
						{
							"name": "Create Negative Scenarios (POST)",
							"item": [
								{
									"name": "Request Body Missing required fields",
									"item": [
										{
											"name": "missing First name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500\", function () {\r",
															"    pm.expect([400, 500]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\"\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing Last name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500\", function () {\r",
															"    pm.expect([400, 500]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\"\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing total price",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500\", function () {\r",
															"    pm.expect([400, 500]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\"\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing deposit paid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500\", function () {\r",
															"    pm.expect([400, 500]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\"\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing booking dates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500\", function () {\r",
															"    pm.expect([400, 500]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\"\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\": true,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing check in",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500\", function () {\r",
															"    pm.expect([400, 500]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\"\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\" : {\r\n        \"checkout\": \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing check out",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500\", function () {\r",
															"    pm.expect([400, 500]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\"\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "Request  body completely Empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500\", function () {\r",
															"    pm.expect([400, 500]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\"\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Wrong data types",
									"item": [
										{
											"name": "First Name Field Wrong Data",
											"item": [
												{
													"name": "First name as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": 123456,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"@#$%&\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"🔥🔥\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": true,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": false,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Empty String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": null,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"first_name\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Last Name Field Wrong Data",
											"item": [
												{
													"name": "Last name as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : 123456,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"@#$%&\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"🔥🔥\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : true,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : false,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Empty String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : null,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Total Price Field Wrong Data",
											"item": [
												{
													"name": "Total Price as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : \"abcd\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : \"@#$@\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : \"🔥🔥\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : true,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : false,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Negative Value",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : -200,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Zero Value",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 0,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : null,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"total_price\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Deposit Paid Field Wrong Data",
											"item": [
												{
													"name": "Deposit Paid as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"🔥🔥\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : null,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"deposit_paid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Check In Date Field Wrong Data",
											"item": [
												{
													"name": "Check In Date as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"yyyy-mm-dd\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : 12102025,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date invalid format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"10/2025/12\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"@$$@-$$-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-🔥🔥-🔥🔥\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : true,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : false,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : null,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"check_in\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Check Out Date Field Wrong Data",
											"item": [
												{
													"name": "Check Out Date as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-10\",\r\n        \"checkout\" : \"yyyy-mm-dd\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-10\",\r\n        \"checkout\" : \"20251030\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date invalid format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-09-10\",\r\n        \"checkout\" : \"10/2025/12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"@@@@-$$-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-20\",\r\n        \"checkout\" : \"2025-🔥🔥-🔥🔥\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : true\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : false\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : null\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"check_out\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Booking Dates Field Wrong Data",
											"item": [
												{
													"name": "Booking Dates as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : \"2025-10-02\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : 20251210,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date invalid format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-09-10\",\r\n        \"checkout\" : \"10/2025/12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : \"@@@@-$$-30\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  \"2025-🔥🔥-🔥🔥\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  true,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  false,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : \"\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  null,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"booking_dates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates field as an Array",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : [\r\n        // \"checkin\" : \"2025-10-25\",\r\n        // \"checkout\" : \"2025-10-30\"\r\n    ],\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Unexpected Negative Scenarios",
									"item": [
										{
											"name": "Extra unsupported fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"API should ignore extra fields (age, country) inside bookingdates\", function () {\r",
															"    let res = pm.response.json();\r",
															"\r",
															"    pm.expect(res).to.have.property(\"booking\");\r",
															"\r",
															"    pm.expect(res.booking).to.have.property(\"bookingdates\");\r",
															"\r",
															"    pm.expect(res.booking.bookingdates).to.not.have.property(\"age\");\r",
															"    pm.expect(res.booking.bookingdates).to.not.have.property(\"country\");\r",
															"\r",
															"    pm.expect(res.booking.firstname).to.eql(\"Eslam\");\r",
															"    pm.expect(res.booking.lastname).to.eql(\"Roshdy\");\r",
															"    pm.expect(res.booking.totalprice).to.eql(250);\r",
															"    pm.expect(res.booking.depositpaid).to.eql(true);\r",
															"\r",
															"    pm.expect(res.booking.bookingdates.checkin).to.eql(\"2025-10-25\");\r",
															"    pm.expect(res.booking.bookingdates.checkout).to.eql(\"2025-10-30\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\",\r\n        \"age\": 30,\r\n        \"country\": \"Egypt\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "completely corrupted body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500\", function () {\r",
															"    pm.expect([400, 500]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\"\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : 300,\r\n    \"lastname\" : false,\r\n    \"totalprice\" : \"🔥🔥\",\r\n    \"depositpaid\" : null,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"#@@@-aa-25\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"age\": 30,\r\n    \"country\": \"Egypt\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "Array of unsupported fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"API should ignore extra field (extra array)\", function () {\r",
															"    let res = pm.response.json();\r",
															"\r",
															"    pm.expect(res).to.have.property(\"booking\");\r",
															"\r",
															"    pm.expect(res.booking).to.have.property(\"bookingdates\");\r",
															"\r",
															"    pm.expect(res.booking).to.not.have.property(\"extra\");\r",
															"\r",
															"    pm.expect(res.booking.firstname).to.eql(\"Eslam\");\r",
															"    pm.expect(res.booking.lastname).to.eql(\"Roshdy\");\r",
															"    pm.expect(res.booking.totalprice).to.eql(250);\r",
															"    pm.expect(res.booking.depositpaid).to.eql(true);\r",
															"\r",
															"    pm.expect(res.booking.bookingdates.checkin).to.eql(\"2025-10-25\");\r",
															"    pm.expect(res.booking.bookingdates.checkout).to.eql(\"2025-10-30\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"extra\": [\r\n        \"Eslam\",\r\n        500,\r\n        true\r\n        ],\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										},
										{
											"name": "Duplicated fields with different values",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Duplicate fields: last key overrides previous ones\", function () {\r",
															"    let res = pm.response.json();\r",
															"\r",
															"    // expected value of the last duplicate key\r",
															"    pm.expect(res.booking.firstname).to.eql(\"Eslam\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"wrong name\",\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "## ✅ **1) Create Negative Scenarios (POST)**\n\n\\- **Description:**\n\nThis folder contains negative test cases for the **Create Booking (POST /booking)** endpoint.\n\nThe scenarios validate how the API handles invalid or incomplete booking data, such as missing required fields, incorrect data types or empty request bodies. These tests ensure the API returns proper error codes and does not create bookings when the input is invalid."
						},
						{
							"name": "Retieve Negative Scenarios (GET)",
							"item": [
								{
									"name": "Retrieve non-existence id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body has error message Not Found\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/booking/{{bookingid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"booking",
												"{{bookingid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Body has error message Not Found\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/booking/aabb",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"booking",
												"aabb"
											]
										}
									},
									"response": []
								}
							],
							"description": "## ✅ **2) Retrieve Negative Scenarios (GET)**\n\n**\\-Description:**\n\nThis folder includes negative test cases for **Retrieve Booking (GET /booking/{id})**.\n\nScenarios cover requesting bookings using invalid IDs, non-existent IDs.\n\nThe purpose is to verify proper error handling and ensure the API responds with correct status codes for invalid retrieval attempts."
						},
						{
							"name": "Full Update Negative Scenarios (PUT)",
							"item": [
								{
									"name": "Wrong Authentication",
									"item": [
										{
											"name": "full update invalid (no token)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err, res) => {\r",
															"    if (err) {\r",
															"        console.log(\" Error Creating Booking:\", err);\r",
															"        return;\r",
															"    }\r",
															"    let bookingData = res.json();\r",
															"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Update (no token -tev scenario)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"pm.test(\"Body must have error message Forbidden\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 320,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-11-05\"\r\n    },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "full update invalid (wrong token)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err, res) => {\r",
															"    if (err) {\r",
															"        console.log(\" Error Creating Booking:\", err);\r",
															"        return;\r",
															"    }\r",
															"    let bookingData = res.json();\r",
															"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Update (wrong token -tev scenario)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"pm.test(\"Body must have error message Forbidden\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token=abc123",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 320,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-11-05\"\r\n    },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Request Body Missing required fields",
									"item": [
										{
											"name": "missing first name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Body must have error message Bad Request\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 320,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-11-05\"\r\n    },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing last name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Body must have error message Bad Request\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"totalprice\" : 320,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-11-05\"\r\n    },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing total price",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Body must have error message Bad Request\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-11-05\"\r\n    },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing deposit paid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Body must have error message Bad Request\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"totalprice\": 320,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-11-05\"\r\n    },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing booking dates",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Body must have error message Bad Request\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"totalprice\": 320,\r\n    \"depositpaid\": false,\r\n    \"bookingdates\" : {\r\n        \"checkout\" : \"2025-11-05\"\r\n    },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing check in",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Body must have error message Bad Request\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"totalprice\": 320,\r\n    \"depositpaid\": false,\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing check out",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Body must have error message Bad Request\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"totalprice\": 320,\r\n    \"depositpaid\": false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\"\r\n            },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Request  body completely Empty",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Body must have error message Bad Request\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													"pm.sendRequest({\r",
													"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            username: pm.environment.get(\"username\") || \"admin\",\r",
													"            password: pm.environment.get(\"password\") || \"password123\"\r",
													"        })\r",
													"    }\r",
													"}, (err, res) => {\r",
													"    if (err) {\r",
													"        console.log(\" Error generating token:\", err);\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    let token = res.json().token;\r",
													"    pm.environment.set(\"token\", token);\r",
													"    console.log(\"New token saved:\", token);\r",
													"});\r",
													"pm.sendRequest({\r",
													"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"             \"firstname\" : \"Eslam\",\r",
													"              \"lastname\" : \"Roshdy\",\r",
													"             \"totalprice\" : 260,\r",
													"             \"depositpaid\" : true,\r",
													"                \"bookingdates\" : {\r",
													"                     \"checkin\" : \"2025-10-25\",\r",
													"                    \"checkout\" : \"2025-10-30\"\r",
													"                },\r",
													"    \"additionalneeds\" : \"Breakfast\"\r",
													"        })\r",
													"    }\r",
													"}, (err2, res2) => {\r",
													"    if (err2) {\r",
													"        console.log(\" Error Creating Booking:\", err2);\r",
													"        return;\r",
													"    }\r",
													"    let token = pm.environment.get(\"token\");\r",
													"    let bookingData = res2.json();\r",
													"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
													"\r",
													"    pm.visualizer.set(`\r",
													"        <h2 style=\"color:green;\">Booking Created Before Update (missing First name -tev scenario)</h2>\r",
													"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
													"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
													"    `);\r",
													"\r",
													"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Wrong data types",
									"item": [
										{
											"name": "First Name Field Wrong Data",
											"item": [
												{
													"name": "First name as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": 123456,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"@#$%&\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"🔥🔥\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": true,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": false,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Empty String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": null,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"first_name\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Update (First Name Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Last Name Field Wrong Data",
											"item": [
												{
													"name": "Last name as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : 123456,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"@#$%&\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"🔥🔥\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : true,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : false,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Empty String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : null,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Update (Last Name Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Total Price Field Wrong Data",
											"item": [
												{
													"name": "Total Price as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : \"abcd\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : \"@#$@\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : \"🔥🔥\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : true,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : false,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Negative Value",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : -200,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Zero Value",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 0,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : null,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"total_price\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Update (Total Price Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Deposit Paid Field Wrong Data",
											"item": [
												{
													"name": "Deposit Paid as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"🔥🔥\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : null,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"deposit_paid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Update (Deposit Paid Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Check In Date Field Wrong Data",
											"item": [
												{
													"name": "Check In Date as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"yyyy-mm-dd\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : 12102025,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date invalid format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"10/2025/12\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"@$$@-$$-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-🔥🔥-🔥🔥\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : true,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : false,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : null,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"check_in\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Update (Check In Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Check Out Date Field Wrong Data",
											"item": [
												{
													"name": "Check Out Date as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-10\",\r\n        \"checkout\" : \"yyyy-mm-dd\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-10\",\r\n        \"checkout\" : \"20251030\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date invalid format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-09-10\",\r\n        \"checkout\" : \"10/2025/12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"@@@@-$$-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-20\",\r\n        \"checkout\" : \"2025-🔥🔥-🔥🔥\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : true\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : false\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : null\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"check_out\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Update (Check Out Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Booking Dates Field Wrong Data",
											"item": [
												{
													"name": "Booking Dates as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : \"2025-10-02\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : 20251210,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date invalid format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-09-10\",\r\n        \"checkout\" : \"10/2025/12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : \"@@@@-$$-30\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  \"2025-🔥🔥-🔥🔥\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  true,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  false,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : \"\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  null,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"booking_dates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates field as an Array",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : [\r\n        // \"checkin\" : \"2025-10-25\",\r\n        // \"checkout\" : \"2025-10-30\"\r\n    ],\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Update (Booking Dates Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													"pm.sendRequest({\r",
													"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            username: pm.environment.get(\"username\") || \"admin\",\r",
													"            password: pm.environment.get(\"password\") || \"password123\"\r",
													"        })\r",
													"    }\r",
													"}, (err, res) => {\r",
													"    if (err) {\r",
													"        console.log(\" Error generating token:\", err);\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    let token = res.json().token;\r",
													"    pm.environment.set(\"token\", token);\r",
													"    console.log(\"New token saved:\", token);\r",
													"});\r",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Unexpected Negative Scenarios",
									"item": [
										{
											"name": "Extra unsupported fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500 or 403\", function () {\r",
															"    pm.expect([400, 500, 403]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\",\r",
															"        \"Forbidden\",\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Marwan\",\r\n    \"lastname\" : \"mosa\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\",\r\n        \"age\": 30,\r\n        \"country\": \"Egypt\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "completely corrupted body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500 or 403\", function () {\r",
															"    pm.expect([400, 500, 403]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\",\r",
															"        \"Forbidden\",\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : 300,\r\n    \"lastname\" : false,\r\n    \"totalprice\" : \"🔥🔥\",\r\n    \"depositpaid\" : null,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"#@@@-aa-25\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"age\": 30,\r\n    \"country\": \"Egypt\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Array of unsupported fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500 or 403\", function () {\r",
															"    pm.expect([400, 500, 403]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\",\r",
															"        \"Forbidden\",\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Marwan\",\r\n    \"lastname\" : \"Mosa\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"extra\": [\r\n        \"Eslam\",\r\n        500,\r\n        true\r\n        ],\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Duplicated fields with different values",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500 or 403\", function () {\r",
															"    pm.expect([400, 500, 403]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\",\r",
															"        \"Forbidden\",\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"wrong name\",\r\n    \"firstname\" : \"Marwan\",\r\n    \"lastname\" : \"Mosa\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n    \r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Non-Exist ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"update_bookingid\", \"\");"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Body must have error message Not Found\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Eslam\",\r\n    \"lastname\": \"Roshdy\",\r\n    \"totalprice\": 320,\r\n    \"depositpaid\": false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\": \"2025-11-05\"\r\n            },\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{update_bookingid}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													"pm.sendRequest({\r",
													"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"             \"firstname\" : \"Eslam\",\r",
													"              \"lastname\" : \"Roshdy\",\r",
													"             \"totalprice\" : 260,\r",
													"             \"depositpaid\" : true,\r",
													"                \"bookingdates\" : {\r",
													"                     \"checkin\" : \"2025-10-25\",\r",
													"                    \"checkout\" : \"2025-10-30\"\r",
													"                },\r",
													"    \"additionalneeds\" : \"Breakfast\"\r",
													"        })\r",
													"    }\r",
													"}, (err2, res2) => {\r",
													"    if (err2) {\r",
													"        console.log(\" Error Creating Booking:\", err2);\r",
													"        return;\r",
													"    }\r",
													"    let token = pm.environment.get(\"token\");\r",
													"    let bookingData = res2.json();\r",
													"    pm.environment.set(\"update_bookingid\", bookingData.bookingid);\r",
													"\r",
													"    pm.visualizer.set(`\r",
													"        <h2 style=\"color:green;\">Booking Created Before Update (Unexpected Negative Scenarios)</h2>\r",
													"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
													"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
													"    `);\r",
													"\r",
													"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"description": "## ✅ **3) Full Update Negative Scenarios (PUT)**\n\n**\\-Description:**\n\nThis folder contains negative test cases for **Full Update Booking (PUT /booking/{id})**.\n\nTests focus on invalid booking IDs, missing or incorrect authentication tokens, invalid or incomplete request bodies, incorrect data formats, and attempts to update non-existing bookings. These cases ensure the API rejects invalid full update requests correctly."
						},
						{
							"name": "Partial Update Negative Scenarios (PATCH)",
							"item": [
								{
									"name": "Wrong Authentication",
									"item": [
										{
											"name": "partial update invalid (no token)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 300,\r",
															"             \"depositpaid\" : false,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"cup of Tea\"\r",
															"        })\r",
															"    }\r",
															"}, (err, res) => {\r",
															"    if (err) {\r",
															"        console.log(\" Error Creating Booking:\", err);\r",
															"        return;\r",
															"    }\r",
															"\r",
															"    let bookingData = res.json();\r",
															"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"     pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Partial Update (no token -tev scenario)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Partial Update Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"    console.log(\" Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"pm.test(\"Body must have error message Forbidden\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\": \"Roshdy\",\r\n    \"lastname\": \"Marawan\",\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{partial_update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "partial update invalid (wrong token)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Eslam\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 260,\r",
															"             \"depositpaid\" : true,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Breakfast\"\r",
															"        })\r",
															"    }\r",
															"}, (err, res) => {\r",
															"    if (err) {\r",
															"        console.log(\" Error Creating Booking:\", err);\r",
															"        return;\r",
															"    }\r",
															"    let bookingData = res.json();\r",
															"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before Partial Update (wrong token -tev scenario)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Partial Update Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"pm.test(\"Body must have error message Forbidden\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token=abc123",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\": \"Roshdy\",\r\n    \"lastname\": \"Marawan\",\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{partial_update_bookingid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Wrong data types",
									"item": [
										{
											"name": "First Name Field Wrong Data",
											"item": [
												{
													"name": "First name as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": 123456,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"@#$%&\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"🔥🔥\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": true,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": false,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Empty String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": null,\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "First name field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain First Name without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.firstname).to.eql(\"Ahmed\");\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"first_name\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Ahmed\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 600,\r",
															"             \"depositpaid\" : false,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Tea\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before (PATCH) Partial Update (First Name Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Last Name Field Wrong Data",
											"item": [
												{
													"name": "Last name as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : 123456,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"@#$%&\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"🔥🔥\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : true,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : false,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Empty String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : null,\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Last name field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Last Name without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.lastname).to.eql(\"Roshdy\");\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"              \"firstname\" : \"Ahmed\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 600,\r",
															"             \"depositpaid\" : false,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Tea\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before (PATCH) Partial Update (Last Name Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Total Price Field Wrong Data",
											"item": [
												{
													"name": "Total Price as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"    pm.test(\"API should Retrieve Request contain Total Price Null\", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.totalprice).to.eql(null);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : \"abcd\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Total Price Null\", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.totalprice).to.eql(null);\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : \"@#$@\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Total Price Null\", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.totalprice).to.eql(null);\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : \"🔥🔥\",\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Total Price Null\", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.totalprice).to.eql(null);\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : true,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Total Price Null\", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.totalprice).to.eql(null);\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : false,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Negative Value",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Total Price Null\", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.totalprice).to.eql(null);\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : -200,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Zero Value",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 0,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Total Price Null\", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.totalprice).to.eql(null);\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : null,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Total Price field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Total Price without changes\", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.totalprice).to.eql(600);\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"total_price\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"              \"firstname\" : \"Ahmed\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 600,\r",
															"             \"depositpaid\" : false,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Tea\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before (PATCH) Partial Update (Total Price Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Deposit Paid Field Wrong Data",
											"item": [
												{
													"name": "Deposit Paid as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"API should Retrieve Request contain Deposit Paid without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.depositpaid).to.eql(false);\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Deposit Paid without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.depositpaid).to.eql(false);\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Deposit Paid without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.depositpaid).to.eql(false);\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Deposit Paid without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.depositpaid).to.eql(false);\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"🔥🔥\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Deposit Paid without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.depositpaid).to.eql(false);\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Deposit Paid without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.depositpaid).to.eql(false);\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : null,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deposit Paid field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Deposit Paid without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.depositpaid).to.eql(false);\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"deposit_paid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"              \"firstname\" : \"Ahmed\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 600,\r",
															"             \"depositpaid\" : false,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Tea\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before (PATCH) Partial Update (Deposit Paid Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Check In Date Field Wrong Data",
											"item": [
												{
													"name": "Check In Date as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"yyyy-mm-dd\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : 12102025,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date invalid format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"10/2025/12\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"@$$@-$$-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-🔥🔥-🔥🔥\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : true,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : false,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : null,\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check In Date field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Check in date without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.bookingdates.checkin).to.eql(\"2025-10-25\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"check_in\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"              \"firstname\" : \"Ahmed\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 600,\r",
															"             \"depositpaid\" : false,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Tea\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before (PATC) Partial Update (Check In Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Check Out Date Field Wrong Data",
											"item": [
												{
													"name": "Check Out Date as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-10\",\r\n        \"checkout\" : \"yyyy-mm-dd\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-10\",\r\n        \"checkout\" : \"20251030\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date invalid format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-09-10\",\r\n        \"checkout\" : \"10/2025/12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"@@@@-$$-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-20\",\r\n        \"checkout\" : \"2025-🔥🔥-🔥🔥\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : true\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : false\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-30\",\r\n        \"checkout\" : null\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Check in date without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.bookingdates.checkout).to.eql(\"2025-10-25\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"check_out\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"              \"firstname\" : \"Ahmed\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 600,\r",
															"             \"depositpaid\" : false,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Tea\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before (PATCH) Partial Update (Check Out Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Booking Dates Field Wrong Data",
											"item": [
												{
													"name": "Booking Dates as String",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : \"2025-10-02\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as numbers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : 20251210,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check Out Date invalid format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : 300,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-09-10\",\r\n        \"checkout\" : \"10/2025/12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Symbols",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : \"@#$%\",\r\n    \"bookingdates\" : \"@@@@-$$-30\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Emoji",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  \"2025-🔥🔥-🔥🔥\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Boolean \"true\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  true,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Boolean \"false\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  false,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Empty Field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : \"\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates as Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500 or 200\", function () {\r",
																	"    pm.expect([400, 500, 200]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\",\r",
																	"        \"Cannot read properties\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"lastname\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" :  null,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates field spelled incorrectly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"API should Retrieve Request contain Booking Dates without changes \", function () {\r",
																	"    let res = pm.response.json();\r",
																	"\r",
																	"    pm.expect(res.bookingdates.checkin).to.eql(\"2025-10-25\");\r",
																	"    pm.expect(res.bookingdates.checkout).to.eql(\"2025-10-30\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"booking_dates\" : {\r\n        \"checkin\" : \"2025-10-25\",\r\n        \"checkout\" : \"2025-10-30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Booking Dates field as an Array",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400 or 500\", function () {\r",
																	"    pm.expect([400, 500]).to.include(pm.response.code);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is one of the expected messages\", function () {\r",
																	"    const errorMessages = [\r",
																	"        \"Internal Server Error\",\r",
																	"        \"Bad Request\"\r",
																	"    ];\r",
																	"    \r",
																	"    pm.expect(\r",
																	"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
																	"    ).to.be.true;\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic",
																"type": "text"
															},
															{
																"key": "Cookie",
																"value": "token={{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"firstname\": \"Eslam\",\r\n    \"last_name\" : \"Roshdy\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : [\r\n        \"2025-10-25\",\r\n         \"2025-10-30\"\r\n    ],\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
															"host": [
																"{{base_url}}"
															],
															"path": [
																"booking",
																"{{partial_update_bookingid}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															"pm.sendRequest({\r",
															"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Content-Type\": \"application/json\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"raw\",\r",
															"        raw: JSON.stringify({\r",
															"             \"firstname\" : \"Ahmed\",\r",
															"              \"lastname\" : \"Roshdy\",\r",
															"             \"totalprice\" : 600,\r",
															"             \"depositpaid\" : false,\r",
															"                \"bookingdates\" : {\r",
															"                     \"checkin\" : \"2025-10-25\",\r",
															"                    \"checkout\" : \"2025-10-30\"\r",
															"                },\r",
															"    \"additionalneeds\" : \"Tea\"\r",
															"        })\r",
															"    }\r",
															"}, (err2, res2) => {\r",
															"    if (err2) {\r",
															"        console.log(\" Error Creating Booking:\", err2);\r",
															"        return;\r",
															"    }\r",
															"    let token = pm.environment.get(\"token\");\r",
															"    let bookingData = res2.json();\r",
															"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
															"\r",
															"    pm.visualizer.set(`\r",
															"        <h2 style=\"color:green;\">Booking Created Before (PATCH) Partial Update (Booking Dates Wrong Data)</h2>\r",
															"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
															"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
															"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
															"    `);\r",
															"\r",
															"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
															"});"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"requests": {},
														"exec": [
															""
														]
													}
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													"pm.sendRequest({\r",
													"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            username: pm.environment.get(\"username\") || \"admin\",\r",
													"            password: pm.environment.get(\"password\") || \"password123\"\r",
													"        })\r",
													"    }\r",
													"}, (err, res) => {\r",
													"    if (err) {\r",
													"        console.log(\" Error generating token:\", err);\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    let token = res.json().token;\r",
													"    pm.environment.set(\"token\", token);\r",
													"    console.log(\"New token saved:\", token);\r",
													"});\r",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Unexpected Negative Scenarios",
									"item": [
										{
											"name": "Extra unsupported fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"API should ignore Extra unsupported Fields and retrieve body with changes in the supported Fields \", function () {\r",
															"    let res = pm.response.json();\r",
															"\r",
															"    pm.expect(res).to.have.property(\"bookingdates\");\r",
															"    pm.expect(res.firstname).to.eql(\"Marwan\");\r",
															"    pm.expect(res.lastname).to.eql(\"mosa\");\r",
															"    pm.expect(res.totalprice).to.eql(400);\r",
															"    pm.expect(res.depositpaid).to.eql(true);\r",
															"\r",
															"    pm.expect(res.bookingdates.checkin).to.eql(\"2025-10-25\");\r",
															"    pm.expect(res.bookingdates.checkout).to.eql(\"2025-10-30\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Marwan\",\r\n    \"lastname\" : \"mosa\",\r\n    \"age\": 30,\r\n    \"country\": \"Egypt\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{partial_update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Non-Exist ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partial_update_bookingid\", \"\");"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Body must have error message Not Found\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\": \"Roshdy\",\r\n    \"lastname\": \"Marawan\",\r\n    \"additionalneeds\" : \"coffe\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{partial_update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Request  body completely Empty",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"API should ignore Empty Body and retrieve original body without changes\", function () {\r",
															"    let res = pm.response.json();\r",
															"\r",
															"    pm.expect(res).to.have.property(\"bookingdates\");\r",
															"    pm.expect(res.firstname).to.eql(\"Ahmed\");\r",
															"    pm.expect(res.lastname).to.eql(\"Fathy\");\r",
															"    pm.expect(res.totalprice).to.eql(400);\r",
															"    pm.expect(res.depositpaid).to.eql(true);\r",
															"\r",
															"    pm.expect(res.bookingdates.checkin).to.eql(\"2025-10-25\");\r",
															"    pm.expect(res.bookingdates.checkout).to.eql(\"2025-10-30\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{partial_update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "completely corrupted body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 or 500 or 403\", function () {\r",
															"    pm.expect([400, 500, 403]).to.include(pm.response.code);\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is one of the expected messages\", function () {\r",
															"    const errorMessages = [\r",
															"        \"Internal Server Error\",\r",
															"        \"Bad Request\",\r",
															"        \"Forbidden\",\r",
															"    ];\r",
															"    \r",
															"    pm.expect(\r",
															"        errorMessages.some(msg => pm.response.text().includes(msg))\r",
															"    ).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : 300,\r\n    \"lastname\" : false,\r\n    \"totalprice\" : \"🔥🔥\",\r\n    \"depositpaid\" : null,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"#@@@-aa-25\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"age\": 30,\r\n    \"country\": \"Egypt\",\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{partial_update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Array of unsupported fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"API should ignore Extra unsupported Fields and retrieve body with changes in the supported Fields\", function () {\r",
															"    let res = pm.response.json();\r",
															"\r",
															"    pm.expect(res).to.have.property(\"bookingdates\");\r",
															"    pm.expect(res.firstname).to.eql(\"Marwan\");\r",
															"    pm.expect(res.lastname).to.eql(\"Mosa\");\r",
															"    pm.expect(res.totalprice).to.eql(250);\r",
															"    pm.expect(res.depositpaid).to.eql(true);\r",
															"\r",
															"    pm.expect(res.bookingdates.checkin).to.eql(\"2025-10-25\");\r",
															"    pm.expect(res.bookingdates.checkout).to.eql(\"2025-10-30\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"Marwan\",\r\n    \"lastname\" : \"Mosa\",\r\n    \"totalprice\" : 250,\r\n    \"extra\": [\r\n        \"Eslam\",\r\n        500,\r\n        true\r\n        ],\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{partial_update_bookingid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Duplicated fields with different values",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"API should ignore first Field value and retrieve body with change in the duplicated Field\", function () {\r",
															"    let res = pm.response.json();\r",
															"\r",
															"    pm.expect(res).to.have.property(\"bookingdates\");\r",
															"    pm.expect(res.firstname).to.eql(\"Marwan\");\r",
															"    pm.expect(res.lastname).to.eql(\"Mosa\");\r",
															"    pm.expect(res.totalprice).to.eql(250);\r",
															"    pm.expect(res.depositpaid).to.eql(true);\r",
															"\r",
															"    pm.expect(res.bookingdates.checkin).to.eql(\"2025-10-25\");\r",
															"    pm.expect(res.bookingdates.checkout).to.eql(\"2025-10-30\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "token={{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstname\" : \"wrong name\",\r\n    \"firstname\" : \"Marwan\",\r\n    \"lastname\" : \"Mosa\",\r\n    \"totalprice\" : 250,\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/booking/{{partial_update_bookingid}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"booking",
														"{{partial_update_bookingid}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													"pm.sendRequest({\r",
													"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            username: pm.environment.get(\"username\") || \"admin\",\r",
													"            password: pm.environment.get(\"password\") || \"password123\"\r",
													"        })\r",
													"    }\r",
													"}, (err, res) => {\r",
													"    if (err) {\r",
													"        console.log(\" Error generating token:\", err);\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    let token = res.json().token;\r",
													"    pm.environment.set(\"token\", token);\r",
													"    console.log(\"New token saved:\", token);\r",
													"});\r",
													"pm.sendRequest({\r",
													"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"             \"firstname\" : \"Ahmed\",\r",
													"              \"lastname\" : \"Fathy\",\r",
													"             \"totalprice\" : 400,\r",
													"             \"depositpaid\" : true,\r",
													"                \"bookingdates\" : {\r",
													"                     \"checkin\" : \"2025-10-25\",\r",
													"                    \"checkout\" : \"2025-10-30\"\r",
													"                },\r",
													"    \"additionalneeds\" : \"Coffe\"\r",
													"        })\r",
													"    }\r",
													"}, (err2, res2) => {\r",
													"    if (err2) {\r",
													"        console.log(\" Error Creating Booking:\", err2);\r",
													"        return;\r",
													"    }\r",
													"    let token = pm.environment.get(\"token\");\r",
													"    let bookingData = res2.json();\r",
													"    pm.environment.set(\"partial_update_bookingid\", bookingData.bookingid);\r",
													"\r",
													"    pm.visualizer.set(`\r",
													"        <h2 style=\"color:green;\">Booking Created Before Partial Update (Unexpected Negative Scenarios)</h2>\r",
													"            <p style=\"color:white;\"><strong style=\"color:red;\">Token:</strong> ${token}</p>\r",
													"                <p style=\"color:white;\"><strong style=\"color:red;\">Booking ID:</strong> ${bookingData.bookingid}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
													"    `);\r",
													"\r",
													"    console.log(\"Booking created successfully! ID:\", bookingData.bookingid);\r",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"packages": {},
												"requests": {},
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"description": "## ✅ **4) Partial Update Negative Scenarios (PATCH)**\n\n**Description:**  \n  \nThis folder includes negative test cases for **Partial Update Booking (PATCH /booking/{id})**.  \n  \nScenarios validate the behavior when updating a booking with invalid IDs, missing or incorrect authorization, unsupported fields, or invalid data types. The purpose is to ensure the API properly handles bad requests and denies unauthorized or malformed partial updates."
						},
						{
							"name": "Delete Negative Scenarios (DELETE)",
							"item": [
								{
									"name": "Delete booking invalid (no token)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"             \"firstname\" : \"Ahmed\",\r",
													"              \"lastname\" : \"Fathy\",\r",
													"             \"totalprice\" : 400,\r",
													"             \"depositpaid\" : true,\r",
													"                \"bookingdates\" : {\r",
													"                     \"checkin\" : \"2025-10-25\",\r",
													"                    \"checkout\" : \"2025-10-30\"\r",
													"                },\r",
													"    \"additionalneeds\" : \"Dinner\"\r",
													"        })\r",
													"    }\r",
													"}, (err, res) => {\r",
													"    if (err) {\r",
													"        console.log(\"❌ Error Creating Booking:\", err);\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    let bookingData = res.json();\r",
													"    let bookingId = bookingData.bookingid;\r",
													"\r",
													"    pm.environment.set(\"bookingid\", bookingId);\r",
													"\r",
													"    pm.visualizer.set(`\r",
													"        <h2 style=\"color:green;\"> Booking Created Before Deletion</h2>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">ID:</strong> ${bookingId}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
													"    `);\r",
													"\r",
													"    console.log(\" Booking created successfully! ID:\", bookingId);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"pm.test(\"Deleting Error message to have : Forbidden\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/booking/{{bookingid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"booking",
												"{{bookingid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete booking invalid (wrong token)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: \"https://restful-booker.herokuapp.com/booking\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"             \"firstname\" : \"Ahmed\",\r",
													"              \"lastname\" : \"Fathy\",\r",
													"             \"totalprice\" : 400,\r",
													"             \"depositpaid\" : true,\r",
													"                \"bookingdates\" : {\r",
													"                     \"checkin\" : \"2025-10-25\",\r",
													"                    \"checkout\" : \"2025-10-30\"\r",
													"                },\r",
													"    \"additionalneeds\" : \"Dinner\"\r",
													"        })\r",
													"    }\r",
													"}, (err, res) => {\r",
													"    if (err) {\r",
													"        console.log(\"❌ Error Creating Booking:\", err);\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    let bookingData = res.json();\r",
													"    let bookingId = bookingData.bookingid;\r",
													"\r",
													"    pm.environment.set(\"bookingid\", bookingId);\r",
													"\r",
													"    pm.visualizer.set(`\r",
													"        <h2 style=\"color:green;\"> Booking Created Before Deletion</h2>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">ID:</strong> ${bookingId}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Name:</strong> ${bookingData.booking.firstname} ${bookingData.booking.lastname}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Total Price:</strong> ${bookingData.booking.totalprice}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-in:</strong> ${bookingData.booking.bookingdates.checkin}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Check-out:</strong> ${bookingData.booking.bookingdates.checkout}</p>\r",
													"        <p style=\"color:white;\"><strong style=\"color:red;\">Additional Needs:</strong> ${bookingData.booking.additionalneeds}</p>\r",
													"    `);\r",
													"\r",
													"    console.log(\" Booking created successfully! ID:\", bookingId);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"pm.test(\"Deleting Error message to have : Forbidden\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "token= abcd123",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/booking/{{bookingid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"booking",
												"{{bookingid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete booking invalid (Non-exist ID)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													" pm.environment.set(\"bookingid\", \"\");"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Deleting Error message to have : Not Found\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "token= abcd123",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}/booking/{{bookingid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"booking",
												"{{bookingid}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## ✅ **5) Delete Negative Scenarios (DELETE)**\n\n**\\-Description:**\n\nThis folder contains negative test cases for **Delete Booking (DELETE /booking/{id})**.\n\nThe scenarios include deleting bookings with invalid IDs, missing/incorrect authentication tokens, or attempting to delete already-removed or non-existent bookings. Tests ensure the API returns appropriate error responses and prevents unauthorized deletion actions."
						}
					],
					"description": "❌ Negative Scenarios\n\n📘 Description:\n\nThis folder includes negative test cases that verify how the API handles invalid input, missing fields, unauthorized access, or incorrect booking IDs.  \nThese tests ensure the API returns proper error codes and messages.\n\n🔸 Requests inside:\n\n# Endpoint Method Purpose\n\n1 /booking POST Try to create a booking with missing required fields  \n2 /booking/{id} GET Retrieve a booking using an invalid/non-existent ID  \n3 /booking/{id} PUT Attempt to update without a token\n\n4/booking/{id} PUT Try to update a booking with missing required fields  \n4 /booking/{id} PATCH Attempt to update with an expired or invalid token  \n5 /booking/{id} DELETE Delete booking without authentication or wrong token\n\n🧩 Validation Focus:\n\nVerify error handling (403 Forbidden, 404 Not Found, etc.).\n\nEnsure no booking is created/modified when input is invalid.\n\nValidate response messages and structure for failed operations."
				}
			],
			"description": "Booking Collection\n\n📘 Description:\n\nThis collection contains all CRUD operations related to bookings on the Restful Booker API.  \nIt verifies the creation, retrieval, updating, and deletion of bookings, ensuring data consistency and correct response handling.\n\nIt is organized into two main sub-collections:\n\n- **Positive Scenarios** → Valid CRUD operations.\n    \n- **Negative Scenarios** → Invalid or unauthorized actions to test error handling.\n    \n\nThese tests ensure that the Booking API behaves correctly under both expected and unexpected conditions.\n\n🔹 Includes:\n\nPOST /booking → Create a new booking.\n\nGET /booking/{id} → Retrieve a booking by its ID.\n\nPUT /booking/{id} → Update an existing booking (full update).\n\nPATCH /booking/{id} → Update a booking partially.\n\nDELETE /booking/{id} → Delete a booking.\n\n✅ Test Focus:\n\nVerify booking creation with correct data (status code 200 / 201).\n\nValidate booking details (first name, last name, price, deposit, etc.).\n\nConfirm that update and delete operations require a valid token.\n\nCheck response time and schema consistency."
		},
		{
			"name": "Ping (Healthcheck)",
			"item": [
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ping",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			],
			"description": "Ping Collection\n\n📘 Description:\n\nThis collection contains a simple health check endpoint for the Restful Booker API.\nIt’s used to ensure the server is running before executing other tests.\n\n🔹 Includes:\n\nGET /ping → Check if the API is available.\n\n✅ Test Focus:\n\nValidate the response status (201 or 200).\n\nAssert that the response time is within acceptable limits.\n\nUse as a pre-check before running the full test suite."
		}
	]
}